#!/usr/bin/env python
import binascii
import operator
import sys
from Crypto.Util.number import inverse as modinv
from functools import reduce


VERBOSE = 1


def trace(*args, **kwargs):
    if VERBOSE: print(*args, file=sys.stderr, flush=True, **kwargs)


def solve():
    C = 12348446374818124785047003483520927723463037176164584182534831412133180628481657983543696351026847573095962444977455917028098119080577417044024579966437124155634016811401377813838933094471740535056528617449150832316250210717642685426014874295549265720543891802958288398542235894670411933149625284652440953413212310794688880607583457638169630078
    N = 73777733563828426821166743687859698789401296904268065723223154794019196925155447471863968833565501516440592954626981887392525580215103640010829661360292651828071519332853318312581688446978063704198253456823934612199636980854860094387209952373707617504589502368238807522652542968313964862007011712816434186396732995632792741802214139582180905539
    E = 65537

    # http://factordb.com/index.php?query=73777733563828426821166743687859698789401296904268065723223154794019196925155447471863968833565501516440592954626981887392525580215103640010829661360292651828071519332853318312581688446978063704198253456823934612199636980854860094387209952373707617504589502368238807522652542968313964862007011712816434186396732995632792741802214139582180905539
    # https://www.alpertron.com.ar/ECM.HTM
    factors = [8934727973, 8956702949, 9076526447, 9574275233, 10199411813, 10356805913, 10362212843, 10760545121, 11457435851, 11484927547, 11491735579, 11587612873, 12401035021, 12788765111, 12934352957, 13460169187, 13479307337, 13701911497, 13904452147, 14231105627, 14514834589, 14653558889, 15032846233, 15099169441, 15247982213, 15273824113, 15429622627, 15485652857, 15604984711, 15945139799, 16201532203, 16505224579, 16747163959, 17016067721]

    reduced = N
    for x in factors:
        reduced //= x

    if reduced > 1:
        print('msieve -q', reduced)
        proc = subprocess.run(['msieve', '-q', str(reduced)], stdout=subprocess.PIPE)
        s = proc.stdout.decode('ascii')
        trace(s)
        xs = re.findall(r'^p\d+: (\d+)', s, re.M)
        for x in xs:
            x = int(x)
            factors.append(x)
            reduced //= x

    assert reduced == 1

    th = reduce(operator.mul, (x - 1 for x in factors), 1)
    D = modinv(E, th)
    M = pow(C, D, N)

    flag = unh(f'{M:x}').decode('ascii')
    return flag


def unh(s):
    if len(s) % 2: s = '0' + s
    return binascii.unhexlify(s)


if __name__ == '__main__':
    print(solve())
